@startuml DCL
skinparam Style strictuml
title Diagramme de classe 

interface BillingStrategy{
    getActPrice(rawPrice : int): int
    {static} normalStrategy(): BillingStrategy
    happyHourStrategy(): BillingStrategy    
}
Class Customer{
    -drinks : ArrayList
    +add(price : int, quantity : int) 
    +printbill()
    +setStrategy(strategy : BillingStrategy)
        
}
class "ArrayList<Integer>" as AI

Customer "1"--> "1" BillingStrategy : possède >
Customer --> AI: drinks

@enduml


@startuml DS-StrategieDemo
skinparam Style strictuml

actor ":StrategyDemo" as main
participant BillingStrategy
participant "firstCustomer:Customer"  as  FC
participant "normalStragegy:BillingStrategy" as NS
participant "drinks1:ArrayList<Integer>" as D1
participant "hapyHourstrategh:Billingstrategy" as HS
participant "secondCustomer:Customer"  as  SC
participant "drinks2:ArrayList<Integer>" as D2

main -> BillingStrategy : normalStrategy = normalStrategy()
main -> BillingStrategy : happyHourStrategy = happyHourStrategy()
main -> FC ** : FC = new(normalStrategy) 
main -> FC : add(100,1)
FC -> NS: Integer price = getActPrice(price*quantity)
FC -> D1: add(price)
main -> FC : setStrategy(happyHourStrategy)
main -> FC : add(100, 2)
FC -> HS: price = getActPrice(price*quantity)
FC -> D1: add(price)
main -> SC ** : secondCustomer = new(happyHourStrategy) 
main -> SC : add(80, 1)
SC -> HS: Integer price = getActPrice(price*quantity)
SC -> D2: add(price)
main -> FC: printBill()
FC -> D1: Integer total = stream().mappToInt(v->v).sum()
FC-> D1: clear()


main -> SC : setStrategy(normalStrategy)
note right of main: voir définition de add et printBill ci-dessus
main -> SC : add(130, 2)
main -> SC : add(250, 1)
main -> SC : printBill()

@enduml