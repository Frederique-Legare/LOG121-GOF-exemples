@startuml Diagramme de classe
skinparam style strictuml
interface Container <<Interface>> {
  getIterator(): Iterator
}
interface Iterator <<Interface>> {
  hasNext(): boolen
  next(): Object
}
class NameRepository{
  name: String[]
  getIterator(): Iterator
}
class NameIterator{
  hasNext(): boolean
  next(): Object
}
class IteratorPatternDemo{
  main():void
}
class NameRepository implements Container 
class NameIterator implements Iterator  
IteratorPatternDemo -> NameRepository : uses
NameRepository -> NameIterator : as

@enduml

@startuml Diagramme de sequence
skinparam style strictuml

actor IteratorPatternDemo

participant "nameRepository:NameRepository" as NameRepository
participant "nameIterator:NameIterator" as NameIterator
participant "System.out" as System

IteratorPatternDemo --> NameRepository ** : nameRepository = new()
IteratorPatternDemo -> NameRepository : getIterator()
NameRepository --> NameIterator ** : nameIterator = new()
NameRepository --> IteratorPatternDemo : nameIterator
IteratorPatternDemo -> NameIterator : hasNext = hasNext()
    loop hasNext
        IteratorPatternDemo -> NameIterator : currentItem = next()
        IteratorPatternDemo -> System : println(currentItem)
        IteratorPatternDemo -> NameIterator : hasNext = hasNext()
    end
@enduml